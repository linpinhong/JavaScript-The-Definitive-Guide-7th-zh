<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - 《JavaScript 权威指南第七版》中英对照</title><link>https://blog.okten.cn/posts/</link><description>All Posts | 《JavaScript 权威指南第七版》中英对照</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>li.tw.ten@gmail.com (Ten Li)</managingEditor><webMaster>li.tw.ten@gmail.com (Ten Li)</webMaster><lastBuildDate>Mon, 02 Nov 2020 22:18:42 +0800</lastBuildDate><atom:link href="https://blog.okten.cn/posts/" rel="self" type="application/rss+xml"/><item><title>第 1 章 JavaScript 概述</title><link>https://blog.okten.cn/posts/ch1/</link><pubDate>Mon, 02 Nov 2020 22:18:42 +0800</pubDate><author>Ten Li</author><guid>https://blog.okten.cn/posts/ch1/</guid><description>JavaScript is the programming language of the web. The overwhelming majority of websites use JavaScript, and all modern web browsers—on desktops, tablets, and phones—include JavaScript interpreters, making JavaScript the most-deployed programming language in history. Over the last decade, Node.js has enabled JavaScript programming outside of web browsers,</description></item><item><title>第 2 章 词法结构</title><link>https://blog.okten.cn/posts/ch2/</link><pubDate>Mon, 02 Nov 2020 22:18:41 +0800</pubDate><author>Ten Li</author><guid>https://blog.okten.cn/posts/ch2/</guid><description>The lexical structure of a programming language is the set of elementary rules that specifies how you write programs in that language. It is the lowest-level syntax of a language: it specifies what variable names look like, the delimiter characters for comments, and how one program statement is separated from the next, for example. This short chapter documents the lexical structure of JavaScript. It covers: 编程语言的</description></item><item><title>第 3 章 类型、值和变量</title><link>https://blog.okten.cn/posts/ch3/</link><pubDate>Mon, 02 Nov 2020 22:18:40 +0800</pubDate><author>Ten Li</author><guid>https://blog.okten.cn/posts/ch3/</guid><description>Computer programs work by manipulating values, such as the number 3.14 or the text “Hello World.” The kinds of values that can be represented and manipulated in a programming language are known as types, and one of the most fundamental characteristics of a programming language is the set of types it supports. When a program needs to retain a</description></item><item><title>第 4 章 表达式和运算符</title><link>https://blog.okten.cn/posts/ch4/</link><pubDate>Mon, 02 Nov 2020 22:18:39 +0800</pubDate><author>Ten Li</author><guid>https://blog.okten.cn/posts/ch4/</guid><description>This chapter documents JavaScript expressions and the operators with which many of those expressions are built. An expression is a phrase of JavaScript that can be evaluated to produce a value. A constant embedded literally in your program is a very simple kind of expression. A variable name is also a simple expression that evaluates to whatever value has been assigned to that variable. Complex expressions are built from simpler</description></item><item><title>第 5 章 语句</title><link>https://blog.okten.cn/posts/ch5/</link><pubDate>Mon, 02 Nov 2020 22:18:38 +0800</pubDate><author>Ten Li</author><guid>https://blog.okten.cn/posts/ch5/</guid><description>Chapter 4 described expressions as JavaScript phrases. By that analogy, statements are JavaScript sentences or commands. Just as English sentences are terminated and separated from one another with periods, JavaScript statements are terminated with semicolons (§2.6). Expressions are evaluated to produce a value, but statements are executed to make something happen. 第 4 章将表达式描述为 JavaScript 短语</description></item><item><title>第 6 章 对象</title><link>https://blog.okten.cn/posts/ch6/</link><pubDate>Mon, 02 Nov 2020 22:18:37 +0800</pubDate><author>Ten Li</author><guid>https://blog.okten.cn/posts/ch6/</guid><description>Objects are JavaScript’s most fundamental datatype, and you have already seen them many times in the chapters that precede this one. Because objects are so important to the JavaScript language, it is important that you understand how they work in detail, and this chapter provides that detail. It begins with a formal overview of objects, then dives into practical</description></item><item><title>第 7 章 数组</title><link>https://blog.okten.cn/posts/ch7/</link><pubDate>Mon, 02 Nov 2020 22:18:36 +0800</pubDate><author>Ten Li</author><guid>https://blog.okten.cn/posts/ch7/</guid><description>This chapter documents arrays, a fundamental datatype in JavaScript and in most other programming languages. An array is an ordered collection of values. Each value is called an element, and each element has a numeric position in the array, known as its index. JavaScript arrays are untyped: an array element may be of any type, and different elements of the same array may be of different types. Array elements may</description></item><item><title>第 8 章 函数</title><link>https://blog.okten.cn/posts/ch8/</link><pubDate>Mon, 02 Nov 2020 22:18:35 +0800</pubDate><author>Ten Li</author><guid>https://blog.okten.cn/posts/ch8/</guid><description>This chapter covers JavaScript functions. Functions are a fundamental building block for JavaScript programs and a common feature in almost all programming languages. You may already be familiar with the concept of a function under a name such as subroutine or procedure. 本章介绍了 JavaScript 函数。函数是 JavaScript 程序的基本构建块，也是几乎所有</description></item><item><title>第 9 章 类</title><link>https://blog.okten.cn/posts/ch9/</link><pubDate>Mon, 02 Nov 2020 22:18:34 +0800</pubDate><author>Ten Li</author><guid>https://blog.okten.cn/posts/ch9/</guid><description>JavaScript objects were covered in Chapter 6. That chapter treated each object as a unique set of properties, different from every other object. It is often useful, however, to define a class of objects that share certain properties. Members, or instances, of the class have their own properties to hold or define their state, but they also have methods that define their behavior. These methods are defined by the class</description></item><item><title>第 10 章 模块</title><link>https://blog.okten.cn/posts/ch10/</link><pubDate>Mon, 02 Nov 2020 22:18:33 +0800</pubDate><author>Ten Li</author><guid>https://blog.okten.cn/posts/ch10/</guid><description>The goal of modular programming is to allow large programs to be assembled using modules of code from disparate authors and sources and for all of that code to run correctly even in the presence of code that the various module authors did not anticipate. As a practical matter, modularity is mostly about encapsulating or hiding private implementation details and keeping the global namespace tidy so that modules cannot accidentally</description></item></channel></rss>